name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm you want to destroy all resources'
        required: false
        type: string
        default: 'UI_TRIGGERED'
      trigger_source:
        description: 'Source of trigger (UI or manual)'
        required: false
        type: string
        default: 'manual'

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation (manual trigger only)
        if: github.event.inputs.trigger_source == 'manual'
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "Error: You must type 'DESTROY' to confirm resource destruction"
            exit 1
          fi

      - name: Log UI trigger
        if: github.event.inputs.trigger_source == 'UI'
        run: |
          echo "Terraform Destroy triggered from UI"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0

      - name: Skip CI/CD Layer (protected resources)
        run: |
          echo "Skipping CI/CD layer destruction - resources are protected with prevent_destroy"

      - name: Stop ECS Tasks before destroy
        run: |
          # Stop all running tasks in the cluster
          CLUSTER_NAME="example-prod-foobar"
          aws ecs list-tasks --cluster $CLUSTER_NAME --output text --query 'taskArns[*]' | xargs -r -n1 aws ecs stop-task --cluster $CLUSTER_NAME --task || true
          
          # Wait for tasks to fully stop
          echo "Waiting for tasks to stop..."
          sleep 60

      - name: Destroy Application Layer
        run: |
          cd terraform-infra/envs/prod/app/foobar
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Routing Layer (internal)
        run: |
          cd terraform-infra/envs/prod/routing/foobar_internal
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Routing Layer (link)
        run: |
          cd terraform-infra/envs/prod/routing/appfoobar_link
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Cache Layer
        run: |
          cd terraform-infra/envs/prod/cache/foobar
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Database Layer
        run: |
          cd terraform-infra/envs/prod/db/foobar
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Log Layer (db_foobar)
        run: |
          cd terraform-infra/envs/prod/log/db_foobar
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Log Layer (app_foobar)
        run: |
          cd terraform-infra/envs/prod/log/app_foobar
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Log Layer (ALB)
        run: |
          cd terraform-infra/envs/prod/log/alb
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Destroy Network Layer
        run: |
          cd terraform-infra/envs/prod/network/main
          terraform init
          terraform destroy -auto-approve -refresh=false