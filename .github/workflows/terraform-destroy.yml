name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm you want to destroy all resources'
        required: true
        type: string

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "Error: You must type 'DESTROY' to confirm resource destruction"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0

      - name: Destroy CI/CD Layer
        run: |
          cd terraform-infra/envs/prod/cicd/app_foobar
          terraform init
          terraform destroy -auto-approve -refresh=false

      - name: Pre-cleanup for Application Layer
        run: |
          cd terraform-infra/envs/prod/app/foobar
          terraform init
          
          # Get resource names from Terraform outputs
          CLUSTER_NAME=$(terraform output -raw cluster_name || echo "")
          SERVICE_NAME=$(terraform output -raw service_name || echo "")
          BUCKET_NAME=$(terraform output -raw bucket_name || echo "")
          
          # Stop ECS tasks if resources exist
          if [ -n "$CLUSTER_NAME" ] && [ -n "$SERVICE_NAME" ]; then
            aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --desired-count 0 || true
            sleep 10
            aws ecs list-tasks --cluster "$CLUSTER_NAME" --output text --query 'taskArns[*]' | xargs -r -n1 aws ecs stop-task --cluster "$CLUSTER_NAME" --task || true
            sleep 30
          fi
          
          # Empty S3 bucket if it exists
          if [ -n "$BUCKET_NAME" ]; then
            aws s3 rm "s3://$BUCKET_NAME" --recursive || true
          fi

      - name: Destroy Application Layer
        run: |
          cd terraform-infra/envs/prod/app/foobar
          terraform destroy -auto-approve

      - name: Destroy Routing Layer (internal)
        run: |
          cd terraform-infra/envs/prod/routing/foobar_internal
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Routing Layer (link)
        run: |
          cd terraform-infra/envs/prod/routing/appfoobar_link
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Cache Layer
        run: |
          cd terraform-infra/envs/prod/cache/foobar
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Database Layer
        run: |
          cd terraform-infra/envs/prod/db/foobar
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Log Layer (db_foobar)
        run: |
          cd terraform-infra/envs/prod/log/db_foobar
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Log Layer (app_foobar)
        run: |
          cd terraform-infra/envs/prod/log/app_foobar
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Log Layer (ALB)
        run: |
          cd terraform-infra/envs/prod/log/alb
          terraform init
          terraform destroy -auto-approve

      - name: Destroy Network Layer
        run: |
          cd terraform-infra/envs/prod/network/main
          terraform init
          terraform destroy -auto-approve